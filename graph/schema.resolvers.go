package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"CareXR_WebService/config"
	"CareXR_WebService/fixtures"
	"CareXR_WebService/graph/model"
	"CareXR_WebService/services"
	"context"
	"fmt"
)

// MemberLogin is the resolver for the MemberLogin field.
func (r *queryResolver) MemberLogin(ctx context.Context, username string, password string) (*model.Member, error) {
	service := services.NewMemberService(
		&fixtures.FixtureLoader{Prefix: "../.."},
		config.Neo4jDriver)

	response, _ := service.MemberLogin(username, password)
	//fmt.Printf("%s\n", movieById["member"].(map[string]interface{})["name"])

	memberData := response["member"].(map[string]interface{})
	memberOfData := response["institutions"].([]interface{})

	uuid := memberData["uuid"].(string)

	member := &model.Member{
		UUID:     &uuid,
		MemberOf: []*model.MemberOf{},
	}

	for _, element := range memberOfData {
		role := element.(map[string]interface{})["role"].(string)

		institutionData := element.(map[string]interface{})["institution"].(map[string]interface{})
		institutionUUID := institutionData["uuid"].(string)
		institutionLabel := institutionData["label"].(string)
		institutionName := institutionData["name"].(string)

		member.MemberOf = append(member.MemberOf, &model.MemberOf{&role, &model.Institution{&institutionUUID, &institutionLabel, &institutionName}})

	}
	return member, nil
}

// MedicationToTake is the resolver for the MedicationToTake field.
func (r *queryResolver) MedicationToTake(ctx context.Context, isAvailable bool, pacientID *string, memberID *string, institutionID *string) ([]*model.MedicationToTake, error) {
	panic(fmt.Errorf("not implemented: MedicationToTake - MedicationToTake"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
